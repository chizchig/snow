name: Build and Deployment

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

permissions:
  id-token: write
  contents: read

jobs:
  argocd:
    name: 'ArgoCD Deployment'
    runs-on: ubuntu-latest

    steps:
    - name: 'Checkout'
      uses: actions/checkout@v4

    - name: 'Verify System Architecture'
      run: |
        uname -a
        arch

    - name: 'Install Docker'
      run: |
        sudo apt-get update
        sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io
        sudo systemctl start docker
        sudo systemctl enable docker

    - name: 'Install Minikube'
      run: |
        curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        chmod +x minikube
        sudo mv minikube /usr/local/bin/

    - name: 'Start Minikube'
      run: |
        minikube start --driver=docker

    - name: 'Set up Kuberconfig for Minikube'
      run: |
        mkdir -p $HOME/.kube
        minikube update-context

    - name: 'Verify Kubernetes Context'
      run: |
        kubectl config current-context
        kubectl cluster-info

    - name: 'Create Namespaces'
      run: |
        # Create argocd namespace and verify
        kubectl create namespace argocd || true
        kubectl get namespace argocd
        sleep 5
        
        # Create dev namespace
        kubectl create namespace dev || true
        
        # List all namespaces to verify
        kubectl get namespaces

    - name: 'Install ArgoCD'
      run: |
        # Verify argocd namespace exists
        if kubectl get namespace argocd; then
          echo "Installing ArgoCD in namespace 'argocd'..."
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
          
          # Wait for critical ArgoCD components
          echo "Waiting for ArgoCD components to be ready..."
          sleep 30
          kubectl get pods -n argocd
        else
          echo "ArgoCD namespace not found!"
          exit 1
        fi

    - name: 'Configure ArgoCD'
      run: |
        echo "Configuring ArgoCD service..."
        kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'

    - name: 'Check ArgoCD Version'
      run: |
        kubectl get deployments -n argocd -o jsonpath='{.items[*].spec.template.spec.containers[*].image}' | tr -s '[[:space:]]' '\n' | sort | uniq

    - name: 'Get ArgoCD URL and Credentials'
      run: |
        # Wait for LoadBalancer to get external IP
        echo "Waiting for LoadBalancer IP..."
        sleep 30
        
        # Get ArgoCD URL
        ARGOCD_HOST=$(minikube service argocd-server -n argocd --url | head -n 1)
        echo "ArgoCD URL: $ARGOCD_HOST"
        echo "ARGOCD_HOST=$ARGOCD_HOST" >> $GITHUB_ENV

        kubectl get secret argocd-initial-admin-secret -n argocd
        
        # Get admin password
        ARGO_PWD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
        echo "ArgoCD admin password: $ARGO_PWD"
        echo "ARGO_PWD=$ARGO_PWD" >> $GITHUB_ENV
        
        
        # Save access information to file
        echo "ArgoCD Access Information:" > argocd-access.txt
        echo "Web UI URL: $ARGOCD_HOST" >> argocd-access.txt
        echo "Username: admin" >> argocd-access.txt
        echo "Password: $ARGO_PWD" >> argocd-access.txt

    # - name: 'Wait for ArgoCD Components'
    #   run: |
    #     echo "Waiting for ArgoCD components to be ready..."
    #     kubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd
    #     kubectl wait --for=condition=available --timeout=300s deployment/argocd-repo-server -n argocd
    #     kubectl wait --for=condition=available --timeout=300s deployment/argocd-application-controller -n argocd

    - name: 'Setup ArgoCD Access'
      run: |
        # Change service type to NodePort for better access
        kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "NodePort"}}'
        
        # Get the NodePort
        NODE_PORT=$(kubectl get svc argocd-server -n argocd -o jsonpath='{.spec.ports[0].nodePort}')
        
        # Setup tunnel in background
        nohup minikube tunnel &

    - name: 'Verify ArgoCD Installation'
      run: |
        echo "Verifying ArgoCD installation..."
        kubectl get all -n argocd
        
        echo "ArgoCD Access Information:"
        echo "URL: $(minikube service argocd-server -n argocd --url)"
        echo "Username: admin"
        echo "Password: $ARGO_PWD"

    - name: 'Setup Port Forward'
      run: |
          echo "Setting up port forward for ArgoCD..."
          nohup kubectl port-forward svc/argocd-server -n argocd 8080:443 &
          echo "ArgoCD is accessible at: https://localhost:8080"
          
          # Save access information to file
          echo "ArgoCD Access Information:" > argocd-access.txt
          echo "Web UI URL: $ARGOCD_HOST" >> argocd-access.txt
          echo "Local URL: https://localhost:8080" >> argocd-access.txt
          echo "Username: admin" >> argocd-access.txt
          echo "Password: $ARGO_PWD" >> argocd-access.txt

    - name: 'Upload Access Information'
      uses: actions/upload-artifact@v4
      with:
        name: argocd-access-info
        path: argocd-access.txt
        retention-days: 5