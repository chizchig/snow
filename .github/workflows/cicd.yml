name: Build and Deployment

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

permissions:
  id-token: write
  contents: read

jobs:
  argocd:
    name: 'ArgoCD Deployment'
    runs-on: ubuntu-latest

    steps:
    - name: 'Checkout'
      uses: actions/checkout@v4

    - name: 'Verify System Architecture'
      run: |
        uname -a
        arch

    - name: 'Install Docker'
      run: |
        sudo apt-get update
        sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io
        sudo systemctl start docker
        sudo systemctl enable docker

    - name: 'Install Minikube'
      run: |
        curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        chmod +x minikube
        sudo mv minikube /usr/local/bin/

    - name: 'Start Minikube'
      run: |
        minikube start --driver=docker

    - name: 'Set up Kuberconfig for Minikube'
      run: |
        mkdir -p $HOME/.kube
        minikube update-context

    - name: 'Verify Kubernetes Context'
      run: |
        kubectl config current-context
        kubectl cluster-info

    - name: 'Create Namespaces'
      run: |
        # Create argocd namespace and verify
        kubectl create namespace argocd || true
        kubectl get namespace argocd
        sleep 5
        
        # Create dev namespace
        kubectl create namespace dev || true
        
        # List all namespaces to verify
        kubectl get namespaces

    - name: 'Install ArgoCD'
      run: |
        # Verify argocd namespace exists
        if kubectl get namespace argocd; then
          echo "Installing ArgoCD in namespace 'argocd'..."
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
          
          # Wait for critical ArgoCD components
          echo "Waiting for ArgoCD components to be ready..."
          sleep 30
          kubectl get pods -n argocd
        else
          echo "ArgoCD namespace not found!"
          exit 1
        fi

    - name: 'Configure ArgoCD'
      run: |
        echo "Configuring ArgoCD service..."
        kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "NodePort"}}'

    - name: 'Check ArgoCD Version'
      run: |
        kubectl get deployments -n argocd -o jsonpath='{.items[*].spec.template.spec.containers[*].image}' | tr -s '[[:space:]]' '\n' | sort | uniq

    - name: 'Get Initial ArgoCD Password'
      run: |
        echo "Retrieving ArgoCD initial password..."
        
        # Wait for secret to be available
        echo "Waiting for secret to be created..."
        sleep 30
        
        # Verify secret exists
        echo "Verifying secret existence..."
        kubectl get secret argocd-initial-admin-secret -n argocd
        
        # Get initial password
        INITIAL_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
        
        # Verify password was retrieved
        if [ -z "$INITIAL_PASSWORD" ]; then
          echo "Error: Failed to get initial password"
          echo "Checking all secrets in argocd namespace..."
          kubectl get secrets -n argocd
          exit 1
        fi
        
        # Display login information
        echo "================================================"
        echo "ArgoCD Login Information"
        echo "================================================"
        echo "Username: admin"
        echo "Initial Password: $INITIAL_PASSWORD"
        echo "================================================"
        
        # Save to environment
        echo "ARGO_PWD=$INITIAL_PASSWORD" >> $GITHUB_ENV

    - name: 'Setup ArgoCD Access'
      run: |
        # Get NodePort
        NODE_PORT=$(kubectl get svc argocd-server -n argocd -o jsonpath='{.spec.ports[0].nodePort}')
        MINIKUBE_IP=$(minikube ip)
        
        # Set ArgoCD URL
        ARGOCD_URL="https://$MINIKUBE_IP:$NODE_PORT"
        echo "ARGOCD_URL=$ARGOCD_URL" >> $GITHUB_ENV
        
        echo "ArgoCD will be accessible at: $ARGOCD_URL"
        
        # Setup tunnel in background
        nohup minikube tunnel &
        
        # Setup port forward in background
        nohup kubectl port-forward svc/argocd-server -n argocd 8080:443 --address 0.0.0.0 &
        
        echo "ArgoCD is also accessible at: https://localhost:8080"
        
        # Allow time for port-forward to establish
        sleep 10

    - name: 'Verify ArgoCD Installation'
      run: |
        echo "Verifying ArgoCD installation..."
        kubectl get all -n argocd
        
        # Save access information
        cat << EOF > argocd-access.txt
        ArgoCD Access Information:
        -------------------------
        1. NodePort URL: https://$(minikube ip):$NODE_PORT
        2. Port Forward URL: https://localhost:8080
        
        Login Credentials:
        -------------------------
        Username: admin
        Password: $ARGO_PWD
        
        Important Notes:
        -------------------------
        1. Use HTTPS, not HTTP
        2. Accept the self-signed certificate in your browser
        3. If one access method doesn't work, try the other
        
        Current Status:
        -------------------------
        $(kubectl get pods -n argocd)
        EOF

    - name: 'Upload Access Information'
      uses: actions/upload-artifact@v4
      with:
        name: argocd-access-info
        path: argocd-access.txt
        retention-days: 5

    - name: 'Fix ArgoCD Access'
      run: |
        # Delete any existing problematic services
        kubectl get svc --all-namespaces | grep strike-service | awk '{print "kubectl delete svc -n " $1 " " $2}' | sh
        
        # Configure ArgoCD service properly
        kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "NodePort"}}'
        
        echo "Verifying ArgoCD service configuration..."
        kubectl get svc argocd-server -n argocd -o yaml
        
        # Get the correct ports
        NODEPORT=$(kubectl get svc argocd-server -n argocd -o jsonpath='{.spec.ports[?(@.name=="https")].nodePort}')
        echo "HTTPS NodePort: $NODEPORT"
        
        # Save access information
        cat << EOF > argocd-access.txt
        ArgoCD Access Setup:
        ===================
        
        1. Run in Terminal 1:
        --------------------
        minikube tunnel
        
        2. Run in Terminal 2:
        --------------------
        kubectl port-forward svc/argocd-server -n argocd 8080:443
        
        3. Access ArgoCD:
        ---------------
        URL: https://localhost:8080
        
        Login Credentials:
        ----------------
        Username: admin
        Password: $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
        
        Alternative Access:
        ----------------
        Direct NodePort URL: https://$(minikube ip):$NODEPORT
        
        Troubleshooting:
        --------------
        1. Verify service is running:
            kubectl get svc argocd-server -n argocd
        
        2. Check service details:
            kubectl describe svc argocd-server -n argocd
        
        3. Verify pods are running:
            kubectl get pods -n argocd
        EOF
    # Add this single step after your 'Display Access Instructions' step

    - name: 'Apply Application Manifest'
      run: |
        echo "Applying ArgoCD application from repository..."
        kubectl apply -f overlay/dev/argocd.yml
        
        echo "Application manifest applied. Check the ArgoCD UI for sync status."

        - name: 'Apply Application Manifest'
        run: |
          echo "Applying ArgoCD application from repository..."
          kubectl apply -f overlay/dev/argocd.yml
          echo "Application manifest applied. Check the ArgoCD UI for sync status."
  
    - name: 'Setup Auto Access'
      run: |
        # Create auto-access script
        cat << 'EOF' > argocd-auto-access.sh
        #!/bin/bash
        
        echo "Setting up ArgoCD access..."
        
        # Function to cleanup background processes
        cleanup() {
          echo "Cleaning up..."
          kill $(jobs -p) 2>/dev/null
          exit 0
        }
        
        # Setup cleanup trap
        trap cleanup EXIT INT TERM
        
        # Start minikube tunnel
        echo "Starting minikube tunnel..."
        minikube tunnel &
        sleep 5
        
        # Start port forwarding
        echo "Setting up port forwarding..."
        kubectl port-forward svc/argocd-server -n argocd 8080:443 &
        sleep 3
        
        # Get login credentials
        PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
        
        # Create auto-login HTML
        cat << HTML > argocd-login.html
        <!DOCTYPE html>
        <html>
        <head>
            <title>ArgoCD Auto Login</title>
            <script>
                async function autoLogin() {
                    const loginForm = document.createElement('form');
                    loginForm.method = 'POST';
                    loginForm.action = 'https://localhost:8080/auth/login';
                    
                    const username = document.createElement('input');
                    username.type = 'hidden';
                    username.name = 'username';
                    username.value = 'admin';
                    
                    const password = document.createElement('input');
                    password.type = 'hidden';
                    password.name = 'password';
                    password.value = '${PASSWORD}';
                    
                    loginForm.appendChild(username);
                    loginForm.appendChild(password);
                    document.body.appendChild(loginForm);
                    
                    loginForm.submit();
                }
                window.onload = autoLogin;
            </script>
        </head>
        <body>
            <h2>Connecting to ArgoCD...</h2>
        </body>
        </html>
        HTML
        
        # Display access information
        echo "================================================"
        echo "ArgoCD Access Information"
        echo "================================================"
        echo "Access URL: https://localhost:8080"
        echo "Username: admin"
        echo "Password: $PASSWORD"
        echo ""
        echo "Auto-login page has been created!"
        echo "================================================"
        
        # Keep the script running
        echo "Services are running. Press Ctrl+C to stop..."
        while true; do sleep 1; done
        EOF
        
        chmod +x argocd-auto-access.sh

    - name: 'Create Access Documentation'
      run: |
        cat << EOF > README-ARGOCD-ACCESS.md
        # ArgoCD Quick Access Guide

        ## Automatic Access Setup
        1. Download and extract the \`argocd-auto-access\` artifact
        2. Open a terminal and run:
            \`\`\`bash
            ./argocd-auto-access.sh
            \`\`\`
        3. Open \`argocd-login.html\` in your browser
        
        ## Manual Access (if needed)
        - URL: https://localhost:8080
        - Username: admin
        - Password: $ARGO_PWD

        ## Important Notes
        - Keep the terminal running while using ArgoCD
        - Use HTTPS, not HTTP
        - Accept any self-signed certificate warnings
        
        ## Troubleshooting
        If you cannot access ArgoCD:
        1. Ensure the script is running
        2. Check that ports 8080 is not in use
        3. Try accessing manually with the credentials above
        EOF

    - name: 'Upload Auto-Access Package'
      uses: actions/upload-artifact@v4
      with:
        name: argocd-auto-access
        path: |
          argocd-auto-access.sh
          argocd-login.html
          README-ARGOCD-ACCESS.md
        retention-days: 5

    - name: 'Display Final Instructions'
      run: |
        echo "==================================================="
        echo "ArgoCD Deployment Complete!"
        echo "==================================================="
        echo "To access ArgoCD:"
        echo "1. Download the 'argocd-auto-access' artifact"
        echo "2. Run: ./argocd-auto-access.sh"
        echo "3. Open argocd-login.html in your browser"
        echo ""
        echo "For detailed instructions, see README-ARGOCD-ACCESS.md"
        echo "==================================================="