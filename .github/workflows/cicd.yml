name: Build and Deployment

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

permissions:
  id-token: write
  contents: read

jobs:
  argocd:
    name: 'ArgoCD Deployment'
    runs-on: ubuntu-latest

    steps:
    - name: 'Checkout'
      uses: actions/checkout@v4

    - name: 'Verify System Architecture'
      run: |
        uname -a
        arch

    - name: 'Install Docker'
      run: |
        sudo apt-get update
        sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io
        sudo systemctl start docker
        sudo systemctl enable docker

    - name: 'Install Minikube'
      run: |
        curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        chmod +x minikube
        sudo mv minikube /usr/local/bin/

    - name: 'Start Minikube'
      run: |
        minikube start --driver=docker

    - name: 'Set up Kuberconfig for Minikube'
      run: |
        mkdir -p $HOME/.kube
        minikube update-context

    - name: 'Verify Kubernetes Context'
      run: |
        kubectl config current-context
        kubectl cluster-info

    - name: 'Create Namespaces'
      run: |
        # Create argocd namespace and verify
        kubectl create namespace argocd || true
        kubectl get namespace argocd
        sleep 5
        
        # Create dev namespace
        kubectl create namespace dev || true
        
        # List all namespaces to verify
        kubectl get namespaces

    - name: 'Install ArgoCD'
      run: |
        # Verify argocd namespace exists
        if kubectl get namespace argocd; then
          echo "Installing ArgoCD in namespace 'argocd'..."
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
          
          # Wait for critical ArgoCD components
          echo "Waiting for ArgoCD components to be ready..."
          sleep 30
          kubectl get pods -n argocd
        else
          echo "ArgoCD namespace not found!"
          exit 1
        fi

    - name: 'Configure ArgoCD'
      run: |
        echo "Configuring ArgoCD service..."
        kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "NodePort"}}'

    - name: 'Check ArgoCD Version'
      run: |
        kubectl get deployments -n argocd -o jsonpath='{.items[*].spec.template.spec.containers[*].image}' | tr -s '[[:space:]]' '\n' | sort | uniq

    - name: 'Get Initial ArgoCD Password'
      run: |
        echo "Retrieving ArgoCD initial password..."
        
        # Wait for secret to be available
        echo "Waiting for secret to be created..."
        sleep 30
        
        # Verify secret exists
        echo "Verifying secret existence..."
        kubectl get secret argocd-initial-admin-secret -n argocd
        
        # Get initial password
        INITIAL_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
        
        # Verify password was retrieved
        if [ -z "$INITIAL_PASSWORD" ]; then
          echo "Error: Failed to get initial password"
          echo "Checking all secrets in argocd namespace..."
          kubectl get secrets -n argocd
          exit 1
        fi
        
        # Display login information
        echo "================================================"
        echo "ArgoCD Login Information"
        echo "================================================"
        echo "Username: admin"
        echo "Initial Password: $INITIAL_PASSWORD"
        echo "================================================"
        
        # Save to environment
        echo "ARGO_PWD=$INITIAL_PASSWORD" >> $GITHUB_ENV

    - name: 'Setup ArgoCD Access'
      run: |
        # Get NodePort
        NODE_PORT=$(kubectl get svc argocd-server -n argocd -o jsonpath='{.spec.ports[0].nodePort}')
        MINIKUBE_IP=$(minikube ip)
        
        # Set ArgoCD URL
        ARGOCD_URL="https://$MINIKUBE_IP:$NODE_PORT"
        echo "ARGOCD_URL=$ARGOCD_URL" >> $GITHUB_ENV
        
        echo "ArgoCD will be accessible at: $ARGOCD_URL"
        
        # Setup tunnel in background
        nohup minikube tunnel &
        
        # Setup port forward in background
        nohup kubectl port-forward svc/argocd-server -n argocd 8080:443 --address 0.0.0.0 &
        
        echo "ArgoCD is also accessible at: https://localhost:8080"
        
        # Allow time for port-forward to establish
        sleep 10

    - name: 'Verify ArgoCD Installation'
      run: |
        echo "Verifying ArgoCD installation..."
        kubectl get all -n argocd
        
        # Save access information
        cat << EOF > argocd-access.txt
        ArgoCD Access Information:
        -------------------------
        1. NodePort URL: https://$(minikube ip):$NODE_PORT
        2. Port Forward URL: https://localhost:8080
        
        Login Credentials:
        -------------------------
        Username: admin
        Password: $ARGO_PWD
        
        Important Notes:
        -------------------------
        1. Use HTTPS, not HTTP
        2. Accept the self-signed certificate in your browser
        3. If one access method doesn't work, try the other
        
        Current Status:
        -------------------------
        $(kubectl get pods -n argocd)
        EOF

    - name: 'Upload Access Information'
      uses: actions/upload-artifact@v4
      with:
        name: argocd-access-info
        path: argocd-access.txt
        retention-days: 5

    - name: 'Display Access Instructions'
      run: |
        echo "ArgoCD is now accessible via:"
        echo "1. NodePort: https://$(minikube ip):$(kubectl get svc argocd-server -n argocd -o jsonpath='{.spec.ports[0].nodePort}')"
        echo "2. Port Forward: https://localhost:8080"
        echo ""
        echo "Login Credentials:"
        echo "Username: admin"
        echo "Password: $ARGO_PWD"
        echo ""
        echo "Important Notes:"
        echo "1. Use HTTPS, not HTTP"
        echo "2. Accept the self-signed certificate warning"
        echo "3. Password is case-sensitive"